import streamlit as st

from database.functions import op_get_points, op_save_point
from database.schemas.operation import OperationPointInput, OperationPointRead
from frontend.general import create_big_button
from frontend.utils import change_menu_item

POINT_LABELS = {
    "T0": "–Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
    "T1": "–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Å—Ç–æ–ª–µ",
    "T2": "—á–µ—Ä–µ–∑ 15 –º–∏–Ω –ø–æ—Å–ª–µ —ç–ø–∏–¥—É—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–ª—é—Å–∞",
    "T3": "–ø–æ—Å–ª–µ –∏–Ω–¥—É–∫—Ü–∏–∏ –∞–Ω–µ—Å—Ç–µ–∑–∏–∏ –∏ –∏–Ω—Ç—É–±–∞—Ü–∏–∏ —Ç—Ä–∞—Ö–µ–∏",
    "T4": "–ø–æ—Å–ª–µ –∏–Ω—Å—É—Ñ—Ñ–ª—è—Ü–∏–∏ –≥–∞–∑–∞ –≤ –±—Ä—é—à–Ω—É—é –ø–æ–ª–æ—Å—Ç—å",
    "T5": "–≤ –≥–ª—É–±–æ–∫–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¢—Ä–µ–Ω–¥–µ–ª–µ–Ω–±—É—Ä–≥–∞",
    "T6": "–æ—Å–Ω–æ–≤–Ω–æ–π —ç—Ç–∞–ø –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "T7": "–ø–æ—Å–ª–µ –¥–µ—Å—É—Ñ—Ñ–ª—è—Ü–∏–∏ –≥–∞–∑–∞ –∏–∑ –±—Ä—é—à–Ω–æ–π –ø–æ–ª–æ—Å—Ç–∏",
    "T8": "—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç–∫—Å—Ç—É–±–∞—Ü–∏–∏ —Ç—Ä–∞—Ö–µ–∏",
    "T9": "—á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ê–†–û",
    "T10": "–∫–æ–Ω–µ—Ü 1-—Ö —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "T11": "–∫–æ–Ω–µ—Ü 2-—Ö —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "T12": "–∫–æ–Ω–µ—Ü 5-—Ö —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
}

OPERATION_POINTS = [f"T{i}" for i in range(0, 9)]
POSTOP_POINTS = [f"T{i}" for i in range(9, 13)]


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–ª—é—á -> –ø–æ–¥–ø–∏—Å—å)
PARAMETERS = {
    "date": "–î–∞—Ç–∞",
    "time": "–í—Ä–µ–º—è",
    "chd_spontan": "–ß–î —Å–ø–æ–Ω—Ç–∞–Ω",
    "ofv1": "–û–§–í1",
    "fzhel": "–§–ñ–ï–õ",
    "foe": "–§–û–ï",
    "oel": "–û–ï–õ",
    "ool": "–û–û–õ",
    "ofv1_fzhel": "–û–§–í1/–§–ñ–ï–õ",
    "pos": "–ü–û–°",
    "mos25": "–ú–û–°25",
    "mos50": "–ú–û–°50",
    "mos75": "–ú–û–°75",
    "sos25_75": "–°–û–° 25-75",
    "chss": "–ß–°–°",
    "chss_min": "–ß–°–° –º–∏–Ω",
    "chss_max": "–ß–°–° –º–∞–∫—Å",
    "adsis": "–ê–î—Å–∏—Å",
    "adsis_min": "–ê–¥—Å–∏—Å –º–∏–Ω",
    "adsis_max": "–ê–¥—Å–∏—Å –º–∞–∫—Å",
    "addias": "–ê–î–¥–∏–∞—Å",
    "addias_min": "–ê–¥–¥–∏–∞—Å –º–∏–Ω",
    "addias_max": "–ê–¥–¥–∏–∞—Å –º–∞–∫—Å",
    "adsr": "–ê–î—Å—Ä",
    "adsr_min": "–ê–¥—Å—Ä –º–∏–Ω",
    "adsr_max": "–ê–¥—Å—Ä –º–∞–∫—Å",
    "spo2": "SpO2",
    "diurez_ml_h": "–î–∏—É—Ä–µ–∑ –º–ª/—á",
    "gemoglobin": "–ì–µ–º–æ–≥–ª–æ–±–∏–Ω",
    "neytrofily": "–ù–µ–π—Ç—Ä–æ—Ñ–∏–ª—ã",
    "limfocity": "–õ–∏–º—Ñ–æ—Ü–∏—Ç—ã",
    "gematokrit": "–ì–µ–º–∞—Ç–æ–∫—Ä–∏—Ç",
    "leykocity": "–õ–µ–π–∫–æ—Ü–∏—Ç—ã",
    "pya": "–ø/—è",
    "albumin": "–ê–ª—å–±—É–º–∏–Ω",
    "kreatinin": "–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω",
    "skf": "–°–ö–§",
    "nlr": "NLR",
    "glyukoza_krovi": "–ì–ª—é–∫–æ–∑–∞ –∫—Ä–æ–≤–∏",
    "uo": "–£–û",
    "si": "–°–ò",
    "iopss": "–ò–û–ü–°–°",
    "sao": "–°–∞–û",
    "do2": "DO2",
    "vbd": "–í–ë–î",
    "fio2": "FiO2",
    "etco2": "EtCO2",
    "vt": "VT",
    "f": "f",
    "mv": "MV",
    "peep": "PEEP",
    "ppik": "P–ø–∏–∫",
    "rplato": "–†–ø–ª–∞—Ç–æ",
    "delta_p": "ŒîP",
    "cstat": "–°stat",
    "cdyn": "Cdyn",
    "ball_uzl": "–ë–∞–ª–ª –£–ó–õ",
    "mas": "–ú–ê–°",
    "qcon": "qCon",
    "qnox": "qNOX",
    "emg": "EMG",
    "pn_arter": "P–Ω –∞—Ä—Ç–µ—Ä.",
    "be_arter": "BE –∞—Ä—Ç–µ—Ä.",
    "hco3_arter": "HCO3 –∞—Ä—Ç–µ—Ä.",
    "laktat_arter": "–õ–∞–∫—Ç–∞—Ç –∞—Ä—Ç–µ—Ä.",
    "rao2": "–†–∞–û2",
    "rao2_fio2": "–†–∞–û2/FiO2",
    "raso2": "–†–∞–°–û2",
    "sao2": "S–∞O2",
    "rin_prick": "–†in-prick",
    "cold_test": "Cold-test",
    "motorny_blok": "–ú–æ—Ç–æ—Ä–Ω—ã–π –±–ª–æ–∫",
    "t_operacii": "t –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "t_probuzhdeniya": "t –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è",
    "t_do_extubacii": "t –¥–æ —ç–∫—Å—Ç—É–±–∞—Ü–∏–∏",
    "obem_infuzia": "–û–±—ä–µ–º –∏–Ω—Ñ—É–∑–∏–∏",
    "polo": "–ü–û–õ–û",
    "frenikus_sind": "–§—Ä–µ–Ω–∏–∫—É—Å —Å–∏–Ω–¥.",
    "frenikus_crsh": "–§—Ä–µ–Ω–∏–∫—É—Å/ –¶–†–®",
    "opp": "–û–ü–ü",
    "oslozhneniya": "–û—Å–ª–æ–∂–Ω–µ–Ω–∏—è",
    "bol_crsh": "–ë–æ–ª—å/ –¶–†–®",
    "bol_crsh_min": "–ë–æ–ª—å/ –¶–†–® –ú–∏–Ω",
    "bol_crsh_max": "–ë–æ–ª—å/ –¶–†–® –ú–∞–∫—Å",
    "toshnota_rvota": "–¢–æ—à–Ω–æ—Ç–∞/—Ä–≤–æ—Ç–∞",
    "shkala_aldrete": "–®–∫–∞–ª–∞ Aldrete",
    "vremya_dost_aldrete": "–í—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Aldrete 9-10 –±.",
    "t_aktivizacii": "t –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏",
    "t_voss_peristalt": "t –≤–æ—Å—Å. –ø–µ—Ä–∏—Å—Ç–∞–ª.",
    "t_othozhd_gazov": "t –æ—Ç—Ö–æ–∂–¥. –≥–∞–∑–æ–≤",
    "rashod_opiatov": "–†–∞—Å—Ö–æ–¥ –æ–ø–∏–∞—Ç–æ–≤",
    "bol_mochev_cat": "–ë–æ–ª—å –º–æ—á–µ–≤ –∫–∞—Ç",
    "t_v_aro1": "t –≤ –ê–†–û (1)",
    "t_intensiv_boli": "t –∏–Ω—Ç–µ–Ω—Å–∏–≤. –±–æ–ª–∏",
    "t_voss_foe": "t –≤–æ—Å—Å. –§–û–ï",
    "t_voss_skf": "t –≤–æ—Å—Å. –°–ö–§",
    "t_v_aro2": "t –≤ –ê–†–û (2)",
    "qor15": "QoR-15",
    "udovletvoren": "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω.",
}


def _open_point(point: str):
    st.session_state["current_op_point"] = point
    change_menu_item(item="operation_point")


def _render_point_list(points: list[str], items: list[OperationPointRead]):
    status = {p: False for p in points}
    for m in items:
        if m.point in status and m.data:
            status[m.point] = True
    for p in points:
        col1, col2 = st.columns([2, 1])
        label = POINT_LABELS.get(p, p)
        text = "‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ" if status[p] else "‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        with col1:
            st.markdown(f"**{p} ‚Äî {label}**  \n–°—Ç–∞—Ç—É—Å: {text}")
        with col2:
            create_big_button("–ü–µ—Ä–µ–π—Ç–∏", on_click=_open_point, kwargs={"point": p})


def show_operation():
    person_id = st.session_state.get("current_patient_id")
    measures = op_get_points(person_id)
    st.title("üß™ –û–ø–µ—Ä–∞—Ü–∏—è")
    _render_point_list(OPERATION_POINTS, measures)
    create_big_button(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        on_click=change_menu_item,
        kwargs={"item": "diagnosis_patient"},
        icon="‚¨ÖÔ∏è",
    )


def show_postoperative():
    person_id = st.session_state.get("current_patient_id")
    measures = op_get_points(person_id)
    st.title("üè• –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    _render_point_list(POSTOP_POINTS, measures)
    create_big_button(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        on_click=change_menu_item,
        kwargs={"item": "diagnosis_patient"},
        icon="‚¨ÖÔ∏è",
    )


def show_operation_point():
    point = st.session_state.get("current_op_point")
    if not point:
        change_menu_item(item="operation")
        st.rerun()
    person_id = st.session_state.get("current_patient_id")
    all_points = {m.point: m for m in op_get_points(person_id)}
    current = all_points.get(point)
    title = "üß™ –û–ø–µ—Ä–∞—Ü–∏—è" if point in OPERATION_POINTS else "üè• –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    st.title(f"{title} ‚Äî {POINT_LABELS.get(point, point)}")

    existing = current.data if current else {}

    with st.form("op_point_form"):
        form_values = {}
        for key, label in PARAMETERS.items():
            form_values[key] = st.text_input(label, value=existing.get(key, ""))
        submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True)

    if submitted:
        data = {k: (v or None) for k, v in form_values.items()}
        op_save_point(person_id, OperationPointInput(point=point, data=data))
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        st.rerun()

    back_item = "operation" if point in OPERATION_POINTS else "postoperative_period"
    create_big_button(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        on_click=change_menu_item,
        kwargs={"item": back_item},
        icon="‚¨ÖÔ∏è",
    )
