import pandas as pd
import streamlit as st

from database.functions import op_get_measures, op_add_measure
from database.schemas.operation import OperationDataInput, OperationDataRead
from frontend.general import create_big_button
from frontend.utils import change_menu_item

POINT_LABELS = {
    "T0": "–Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
    "T1": "–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Å—Ç–æ–ª–µ",
    "T2": "—á–µ—Ä–µ–∑ 15 –º–∏–Ω –ø–æ—Å–ª–µ —ç–ø–∏–¥—É—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–ª—é—Å–∞",
    "T3": "–ø–æ—Å–ª–µ –∏–Ω–¥—É–∫—Ü–∏–∏ –∞–Ω–µ—Å—Ç–µ–∑–∏–∏ –∏ –∏–Ω—Ç—É–±–∞—Ü–∏–∏ —Ç—Ä–∞—Ö–µ–∏",
    "T4": "–ø–æ—Å–ª–µ –∏–Ω—Å—É—Ñ—Ñ–ª—è—Ü–∏–∏ –≥–∞–∑–∞ –≤ –±—Ä—é—à–Ω—É—é –ø–æ–ª–æ—Å—Ç—å",
    "T5": "–≤ –≥–ª—É–±–æ–∫–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¢—Ä–µ–Ω–¥–µ–ª–µ–Ω–±—É—Ä–≥–∞",
    "T6": "–æ—Å–Ω–æ–≤–Ω–æ–π —ç—Ç–∞–ø –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "T7": "–ø–æ—Å–ª–µ –¥–µ—Å—É—Ñ—Ñ–ª—è—Ü–∏–∏ –≥–∞–∑–∞ –∏–∑ –±—Ä—é—à–Ω–æ–π –ø–æ–ª–æ—Å—Ç–∏",
    "T8": "—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç–∫—Å—Ç—É–±–∞—Ü–∏–∏ —Ç—Ä–∞—Ö–µ–∏",
    "T9": "—á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ê–†–û",
    "T10": "–∫–æ–Ω–µ—Ü 1-—Ö —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "T11": "–∫–æ–Ω–µ—Ü 2-—Ö —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "T12": "–∫–æ–Ω–µ—Ü 5-—Ö —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
}

OPERATION_POINTS = [f"T{i}" for i in range(0, 9)]
POSTOP_POINTS = [f"T{i}" for i in range(9, 13)]


def _open_point(point: str):
    st.session_state["current_op_point"] = point
    change_menu_item(item="operation_point")


def _render_point_list(points: list[str], measures: list[OperationDataRead]):
    status = {p: False for p in points}
    for m in measures:
        if m.point in status:
            status[m.point] = True
    for p in points:
        col1, col2 = st.columns([2, 1])
        label = POINT_LABELS.get(p, p)
        text = "‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ" if status[p] else "‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        with col1:
            st.markdown(f"**{p} ‚Äî {label}**  \n–°—Ç–∞—Ç—É—Å: {text}")
        with col2:
            create_big_button(
                "–ü–µ—Ä–µ–π—Ç–∏",
                on_click=_open_point,
                kwargs={"point": p},
            )


def show_operation():
    person_id = st.session_state.get("current_patient_id")
    measures = op_get_measures(person_id)
    st.title("üß™ –û–ø–µ—Ä–∞—Ü–∏—è")
    _render_point_list(OPERATION_POINTS, measures)
    create_big_button(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        on_click=change_menu_item,
        kwargs={"item": "diagnosis_patient"},
        icon="‚¨ÖÔ∏è",
    )


def show_postoperative():
    person_id = st.session_state.get("current_patient_id")
    measures = op_get_measures(person_id)
    st.title("üè• –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    _render_point_list(POSTOP_POINTS, measures)
    create_big_button(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        on_click=change_menu_item,
        kwargs={"item": "diagnosis_patient"},
        icon="‚¨ÖÔ∏è",
    )


def show_operation_point():
    point = st.session_state.get("current_op_point")
    if not point:
        change_menu_item(item="operation")
        st.rerun()
    person_id = st.session_state.get("current_patient_id")
    measures = [m for m in op_get_measures(person_id) if m.point == point]
    title = "üß™ –û–ø–µ—Ä–∞—Ü–∏—è" if point in OPERATION_POINTS else "üè• –ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    st.title(f"{title} ‚Äî {POINT_LABELS.get(point, point)}")

    if measures:
        df = pd.DataFrame([m.model_dump() for m in measures])
        st.dataframe(df[["name", "value", "unit"]])
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

    with st.form("op_point_form"):
        name = st.text_input("–ü–∞—Ä–∞–º–µ—Ç—Ä")
        value = st.text_input("–ó–Ω–∞—á–µ–Ω–∏–µ")
        unit = st.text_input("–ï–¥. –∏–∑–º.")
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å", use_container_width=True)

    if submitted and name:
        data = OperationDataInput(point=point, name=name, value=value or None, unit=unit or None)
        op_add_measure(person_id, data)
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        st.rerun()

    back_item = "operation" if point in OPERATION_POINTS else "postoperative_period"
    create_big_button(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        on_click=change_menu_item,
        kwargs={"item": back_item},
        icon="‚¨ÖÔ∏è",
    )
