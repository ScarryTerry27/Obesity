import io
import os
from importlib import import_module

import pandas as pd
import streamlit as st

from backend.reporting import generate_patient_report

import database.functions as db_funcs
from frontend.general import create_big_button
from frontend.utils import change_menu_item


# ===== helpers =====
def _safe(fetch_fn, *args, label="", default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –æ–±—ë—Ä—Ç–∫–∏: –ª–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤ UI, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default."""
    try:
        return fetch_fn(*args)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {label or fetch_fn.__name__}: {e}")
        return default


def _bmi(weight_kg, height_cm):
    try:
        if not weight_kg or not height_cm:
            return None
        h_m = float(height_cm) / 100.0
        if h_m <= 0:
            return None
        return round(float(weight_kg) / (h_m * h_m), 1)
    except Exception:
        return None


def _elg_plan(score):
    if score is None: return "‚Äî"
    if 0 <= score <= 3: return "–û–±—ã—á–Ω–∞—è –ª–∞—Ä–∏–Ω–≥–æ—Å–∫–æ–ø–∏—è"
    if 4 <= score <= 7: return "–í–∏–¥–µ–æ–ª–∞—Ä–∏–Ω–≥–æ—Å–∫–æ–ø–∏—è"
    return "–ò–Ω—Ç—É–±–∞—Ü–∏—è –≤ —Å–æ–∑–Ω–∞–Ω–∏–∏ (–±—Ä–æ–Ω—Ö–æ—Å–∫–æ–ø–∏—è)"


def _stopbang_label(level):
    if level is None: return "‚Äî"
    return ["–ù–∏–∑–∫–∏–π", "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π", "–í—ã—Å–æ–∫–∏–π"][max(0, min(2, int(level)))]


def _caprini_label(level):
    if level is None: return "‚Äî"
    return ["–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π", "–ù–∏–∑–∫–∏–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–í—ã—Å–æ–∫–∏–π", "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"][max(0, min(4, int(level)))]


def _rcri_risk(score):
    if score is None: return "‚Äî"
    if score == 0: return "‚âà0.4%"
    if score == 1: return "‚âà0.9%"
    if score == 2: return "‚âà7%"
    return "‚âà11%+"


def export_patient_data():
    person_stub = st.session_state.get("current_patient_info")
    if not person_stub:
        st.error("–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    st.title("üì§ –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞")

    # 1) –ë–µ—Ä—ë–º ¬´—Å–≤–µ–∂–µ–≥–æ¬ª –ø–∞—Ü–∏–µ–Ω—Ç–∞
    person = _safe(db_funcs.get_person, person_stub.id, label="–∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    if not person:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–∞—Ü–∏–µ–Ω—Ç–∞.")
        return

    # 2) –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ —à–∫–∞–ª—ã (–∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π)
    elg = _safe(db_funcs.elg_get_result, person.id, label="El-Ganzouri")  # -> ElGanzouriRead | None
    ar = _safe(db_funcs.ar_get_result, person.id, label="ARISCAT")  # -> AriscatRead | None
    sb = _safe(db_funcs.sb_get_result, person.id, label="STOP-BANG")  # -> StopBangRead | None
    soba = _safe(db_funcs.get_soba, person.id, label="SOBA")  # -> SobaRead | None
    rcri = _safe(db_funcs.rcri_get_result, person.id, label="RCRI")  # -> LeeRcriRead | None
    cap = _safe(db_funcs.caprini_get_result, person.id, label="Caprini")  # -> CapriniRead | None

    # 2b) –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ —Å—Ä–µ–∑—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ (T0‚Ä¶T12)
    slices_data = []
    for idx in range(13):
        getter = getattr(db_funcs, f"t{idx}_get_result", None)
        data = _safe(getter, person.id, label=f"—Å—Ä–µ–∑ T{idx}") if getter else None
        schema_module = import_module(f"database.schemas.slice_t{idx}")
        schema_cls = getattr(schema_module, f"SliceT{idx}Input")
        slices_data.append((f"T{idx}", data, schema_cls))

    # 3) –°–æ–±–∏—Ä–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –º–∞–∫—Å–∏–º—É–º–æ–º –∑–∞—â–∏—Ç
    def g(obj, name, default=None):
        return getattr(obj, name, default) if obj is not None else default

    atype = g(person, "anesthesia_type", None)

    row = {
        "patient_id": person.id,
        "‚Ññ –∫–∞—Ä—Ç—ã": g(person, "card_number", ""),
        "–§–∞–º–∏–ª–∏—è": g(person, "last_name", ""),
        "–ò–º—è": g(person, "first_name", ""),
        "–û—Ç—á–µ—Å—Ç–≤–æ": g(person, "patronymic", ""),
        "–î–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∏—è": g(person, "inclusion_date", None),
        "–¢–∏–ø –∞–Ω–µ—Å—Ç–µ–∑–∏–∏": atype.value if atype else "",
        "–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)": g(person, "age", None),
        "–†–æ—Å—Ç (—Å–º)": g(person, "height", None),
        "–í–µ—Å (–∫–≥)": g(person, "weight", None),
        "–ü–æ–ª": ("–ñ" if bool(getattr(person, "gender", False)) else "–ú"),
        "–ò–ú–¢": _bmi(g(person, "weight", None), g(person, "height", None)),
    }

    def add_scale(prefix, obj):
        if obj is None:
            return
        data = obj.model_dump()
        data.pop("id", None)
        data.pop("scales_id", None)
        score = data.pop("total_score", None)
        if score is not None:
            row[f"{prefix}: —Å—É–º–º–∞"] = score
        for field, value in data.items():
            row[f"{prefix}: {field}"] = value

    # El-Ganzouri
    add_scale("ELG", elg)
    if elg is not None:
        row["ELG: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"] = _elg_plan(elg.total_score)

    # ARISCAT
    add_scale("ARISCAT", ar)

    # STOP-BANG
    add_scale("STOP-BANG", sb)
    if sb is not None:
        row["STOP-BANG: —Ä–∏—Å–∫"] = _stopbang_label(sb.risk_level)

    # SOBA
    add_scale("SOBA", soba)
    if soba is not None:
        row["SOBA: STOP-BANG —Ä–∏—Å–∫ (–∫—ç—à)"] = _stopbang_label(
            getattr(soba, "stopbang_risk_cached", None)
        )

    # Lee RCRI
    add_scale("RCRI", rcri)
    if rcri is not None:
        row["RCRI: —Ä–∏—Å–∫ (—á–∞—Å—Ç–æ—Ç–∞ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π)"] = _rcri_risk(rcri.total_score)

    # Caprini
    add_scale("Caprini", cap)
    if cap is not None:
        row["Caprini: —Ä–∏—Å–∫"] = _caprini_label(cap.risk_level)

    # 4) –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è —Å—Ä–µ–∑–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É
    for name, data, schema in slices_data:
        for field in schema.model_fields.keys():
            row[f"{name}: {field}"] = getattr(data, field, None) if data is not None else None

    # 5) –ü–æ–∫–∞–∂–µ–º –∏ –¥–∞–¥–∏–º —Å–∫–∞—á–∞—Ç—å
    df = pd.DataFrame([row])
    df.replace({True: 1, False: 0}, inplace=True)
    st.markdown("### –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    st.dataframe(df, width="stretch")

    excel_buf = io.BytesIO()
    df.to_excel(excel_buf, index=False)

    st.download_button(
        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
        data=excel_buf.getvalue(),
        file_name=f"patient_{person.id}_export.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        width="stretch",
    )

    if st.button("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF-–æ—Ç—á—ë—Ç", key="gen_pdf_btn"):
        patient_info = {
            "id": person.id,
            "fio": person.fio,
            "age": getattr(person, "age", None),
            "height": getattr(person, "height", None),
            "weight": getattr(person, "weight", None),
        }
        scales = {
            "EL-Ganzouri": getattr(elg, "total_score", None),
            "ARISCAT": getattr(ar, "total_score", None),
            "STOP-BANG": getattr(sb, "total_score", None),
            "SOBA": getattr(soba, "total_score", None),
            "RCRI": getattr(rcri, "total_score", None),
            "Caprini": getattr(cap, "total_score", None),
        }
        pdf_path = generate_patient_report(patient_info, scales)
        st.session_state["pdf_report_path"] = pdf_path
        st.success("–û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")

    pdf_path = st.session_state.get("pdf_report_path")
    if pdf_path and os.path.exists(pdf_path):
        with open(pdf_path, "rb") as pdf_file:
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF",
                data=pdf_file.read(),
                file_name=os.path.basename(pdf_path),
                mime="application/pdf",
                key="download_pdf_btn",
            )

    st.caption(
        "–ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ —à–∫–∞–ª–∞ –∏–ª–∏ —Å—Ä–µ–∑ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –≤ –≤—ã–≥—Ä—É–∑–∫–µ –±—É–¥—É—Ç –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏—Ö –ø–æ–ª–µ–π."
    )
    create_big_button(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        on_click=change_menu_item,
        kwargs={"item": "diagnosis_patient"},
        key="back_btn",
    )
