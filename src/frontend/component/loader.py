import json
import io
import pandas as pd
import streamlit as st

from database.functions import (
    get_person,
    elg_get_result,
    ar_get_result,
    sb_get_result,
    get_soba,
    rcri_get_result,
    caprini_get_result,
)


# ===== helpers =====
def _safe(fetch_fn, *args, label="", default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –æ–±—ë—Ä—Ç–∫–∏: –ª–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤ UI, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default."""
    try:
        return fetch_fn(*args)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {label or fetch_fn.__name__}: {e}")
        return default


def _bmi(weight_kg, height_cm):
    try:
        if not weight_kg or not height_cm:
            return None
        h_m = float(height_cm) / 100.0
        if h_m <= 0:
            return None
        return round(float(weight_kg) / (h_m * h_m), 1)
    except Exception:
        return None


def _elg_plan(score):
    if score is None: return "‚Äî"
    if 0 <= score <= 3: return "–û–±—ã—á–Ω–∞—è –ª–∞—Ä–∏–Ω–≥–æ—Å–∫–æ–ø–∏—è"
    if 4 <= score <= 7: return "–í–∏–¥–µ–æ–ª–∞—Ä–∏–Ω–≥–æ—Å–∫–æ–ø–∏—è"
    return "–ò–Ω—Ç—É–±–∞—Ü–∏—è –≤ —Å–æ–∑–Ω–∞–Ω–∏–∏ (–±—Ä–æ–Ω—Ö–æ—Å–∫–æ–ø–∏—è)"


def _stopbang_label(level):
    if level is None: return "‚Äî"
    return ["–ù–∏–∑–∫–∏–π", "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π", "–í—ã—Å–æ–∫–∏–π"][max(0, min(2, int(level)))]


def _caprini_label(level):
    if level is None: return "‚Äî"
    return ["–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π", "–ù–∏–∑–∫–∏–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–í—ã—Å–æ–∫–∏–π"][max(0, min(3, int(level)))]


def _rcri_risk(score):
    if score is None: return "‚Äî"
    if score == 0: return "‚âà0.4%"
    if score == 1: return "‚âà0.9%"
    if score == 2: return "‚âà7%"
    return "‚âà11%+"


def export_patient_data():
    person_stub = st.session_state.get("current_patient_info")
    if not person_stub:
        st.error("–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    st.title("üì§ –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞")

    # 1) –ë–µ—Ä—ë–º ¬´—Å–≤–µ–∂–µ–≥–æ¬ª –ø–∞—Ü–∏–µ–Ω—Ç–∞
    person = _safe(get_person, person_stub.id, label="–∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    if not person:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–∞—Ü–∏–µ–Ω—Ç–∞.")
        return

    # 2) –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ —à–∫–∞–ª—ã (–∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π)
    elg = _safe(elg_get_result, person.id, label="El-Ganzouri")  # -> ElGanzouriRead | None
    ar = _safe(ar_get_result, person.id, label="ARISCAT")  # -> AriscatRead | None
    sb = _safe(sb_get_result, person.id, label="STOP-BANG")  # -> StopBangRead | None
    soba = _safe(get_soba, person.id, label="SOBA")  # -> SobaRead | None
    rcri = _safe(rcri_get_result, person.id, label="RCRI")  # -> LeeRcriRead | None
    cap = _safe(caprini_get_result, person.id, label="Caprini")  # -> CapriniRead | None

    # 3) –°–æ–±–∏—Ä–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –º–∞–∫—Å–∏–º—É–º–æ–º –∑–∞—â–∏—Ç
    def g(obj, name, default=None):
        return getattr(obj, name, default) if obj is not None else default

    row = {
        "patient_id": person.id,
        "–§–ò–û": g(person, "fio", ""),
        "–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)": g(person, "age", None),
        "–†–æ—Å—Ç (—Å–º)": g(person, "height", None),
        "–í–µ—Å (–∫–≥)": g(person, "weight", None),
        "–ü–æ–ª": ("–ñ" if bool(getattr(person, "gender", False)) else "–ú"),
        "–ò–ú–¢": _bmi(g(person, "weight", None), g(person, "height", None)),

        # El-Ganzouri
        "ELG: —Å—É–º–º–∞": g(elg, "total_score", None),
        "ELG: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": _elg_plan(g(elg, "total_score", None)),

        # ARISCAT
        "ARISCAT: —Å—É–º–º–∞": g(ar, "total_score", None),

        # STOP-BANG
        "STOP-BANG: —Å—É–º–º–∞": g(sb, "total_score", None),
        "STOP-BANG: —Ä–∏—Å–∫": _stopbang_label(g(sb, "risk_level", None)),

        # SOBA
        "SOBA: STOP-BANG —Å—É–º–º–∞ (–∫—ç—à)": g(soba, "stopbang_score_cached", None),
        "SOBA: STOP-BANG —Ä–∏—Å–∫ (–∫—ç—à)": _stopbang_label(g(soba, "stopbang_risk_cached", None)),
        "SOBA: –ø–ª–æ—Ö–∞—è –§–ù": g(soba, "poor_functional_status", None),
        "SOBA: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≠–ö–ì": g(soba, "ekg_changes", None),
        "SOBA: –Ω–µ–∫–æ–Ω—Ç—Ä. –ê–ì/–ò–ë–°": g(soba, "uncontrolled_htn_ihd", None),
        "SOBA: SpO‚ÇÇ<94%": g(soba, "spo2_room_air_lt_94", None),
        "SOBA: PaCO‚ÇÇ>28": g(soba, "hypercapnia_co2_gt_28", None),
        "SOBA: –¢–ì–í/–¢–≠–õ–ê –∞–Ω–∞–º–Ω–µ–∑": g(soba, "vte_history", None),

        # Lee RCRI
        "RCRI: —Å—É–º–º–∞": g(rcri, "total_score", None),
        "RCRI: —Ä–∏—Å–∫ (—á–∞—Å—Ç–æ—Ç–∞ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π)": _rcri_risk(g(rcri, "total_score", None)),

        # Caprini
        "Caprini: —Å—É–º–º–∞": g(cap, "total_score", None),
        "Caprini: —Ä–∏—Å–∫": _caprini_label(g(cap, "risk_level", None)),
    }

    # 4) –ü–æ–∫–∞–∂–µ–º –∏ –¥–∞–¥–∏–º —Å–∫–∞—á–∞—Ç—å
    df = pd.DataFrame([row])
    st.markdown("### –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    st.dataframe(df, use_container_width=True)

    csv_buf = io.StringIO()
    df.to_csv(csv_buf, index=False)
    st.download_button(
        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
        data=csv_buf.getvalue().encode("utf-8-sig"),
        file_name=f"patient_{person.id}_export.csv",
        mime="text/csv",
        use_container_width=True,
    )

    json_str = json.dumps(row, ensure_ascii=False, indent=2)
    st.download_button(
        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å JSON",
        data=json_str.encode("utf-8"),
        file_name=f"patient_{person.id}_export.json",
        mime="application/json",
        use_container_width=True,
    )

    st.caption("–ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ —à–∫–∞–ª–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –≤ –≤—ã–≥—Ä—É–∑–∫–µ –±—É–¥—É—Ç –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –µ—ë –ø–æ–ª–µ–π.")
