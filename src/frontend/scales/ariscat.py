import streamlit as st

from database.functions import ar_get_result, ar_upsert_result, get_person
from database.schemas.ariscat import AriscatInput
from frontend.components import create_big_button
from frontend.utils import change_menu_item


def _risk_label(score: int) -> str:
    # —Ç–∏–ø–∏—á–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ ARISCAT: <26 –Ω–∏–∑–∫–∏–π, 26‚Äì44 —É–º–µ—Ä–µ–Ω–Ω—ã–π, ‚â•45 –≤—ã—Å–æ–∫–∏–π
    if score >= 45:
        return "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (‚â•45)"
    if score >= 26:
        return "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ (26‚Äì44)"
    return "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (<26)"


def show_ariscat_scale():
    st.subheader("–®–∫–∞–ª–∞ ARISCAT ‚Äî —Ä–∏—Å–∫ –ø–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ª—ë–≥–æ—á–Ω—ã—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π")

    person = st.session_state.get("current_patient_info")  # —ç—Ç–æ PersonRead
    if not person:
        st.error("–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    # 1) –¢—è–Ω–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    saved = ar_get_result(person.id)

    # 2) –î–µ—Ñ–æ–ª—Ç—ã (–µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö)
    defaults = {
        "age_years": int(getattr(person, "age", 50) or 50),
        "spo2_percent": 98,
        "had_resp_infection_last_month": False,
        "has_anemia_hb_le_100": False,
        "incision": "peripheral",  # peripheral | upper_abd | intrathoracic
        "duration_minutes": 90,  # <2—á
        "is_emergency": False,
    }

    if saved:
        defaults.update({
            "age_years": saved.age_years or defaults["age_years"],
            "spo2_percent": saved.spo2_percent or defaults["spo2_percent"],
            "had_resp_infection_last_month": (
                saved.had_resp_infection_last_month
                if saved.had_resp_infection_last_month is not None
                else defaults["had_resp_infection_last_month"]
            ),
            "has_anemia_hb_le_100": (
                saved.has_anemia_hb_le_100
                if saved.has_anemia_hb_le_100 is not None
                else defaults["has_anemia_hb_le_100"]
            ),
            "incision": saved.incision_raw or defaults["incision"],
            "duration_minutes": saved.duration_minutes or defaults["duration_minutes"],
            "is_emergency": (
                saved.is_emergency
                if saved.is_emergency is not None
                else defaults["is_emergency"]
            ),
        })
        st.info(f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤: **{saved.total_score}** ¬∑ {_risk_label(saved.total_score)}")

    # 3) UI —Ñ–æ—Ä–º—ã
    with st.form("ariscat_form"):
        c1, c2 = st.columns(2)
        with c1:
            age_years = st.number_input(
                "–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)", min_value=0, max_value=130, step=1, value=int(defaults["age_years"]),
                key="ar_age"
            )
            spo2_percent = st.number_input(
                "–î–æ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è SpO‚ÇÇ (%)", min_value=50, max_value=100, step=1, value=int(defaults["spo2_percent"]),
                key="ar_spo2"
            )
            had_inf = st.checkbox(
                "–†–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", value=bool(defaults["had_resp_infection_last_month"]),
                key="ar_inf"
            )
            anemia = st.checkbox(
                "–î–æ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∞–Ω–µ–º–∏—è (Hb ‚â§ 100 –≥/–ª)", value=bool(defaults["has_anemia_hb_le_100"]),
                key="ar_anemia"
            )
        with c2:
            incision_label = st.selectbox(
                "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑—Ä–µ–∑",
                ["–ü–µ—Ä–∏—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π", "–í–µ—Ä—Ö–Ω–∏–π –∞–±–¥–æ–º–∏–Ω–∞–ª—å–Ω—ã–π", "–í–Ω—É—Ç—Ä–∏–≥—Ä—É–¥–Ω–æ–π"],
                index={"peripheral": 0, "upper_abd": 1, "intrathoracic": 2}[defaults["incision"]],
                key="ar_incision"
            )
            incision_map = {
                "–ü–µ—Ä–∏—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π": "peripheral",
                "–í–µ—Ä—Ö–Ω–∏–π –∞–±–¥–æ–º–∏–Ω–∞–ª—å–Ω—ã–π": "upper_abd",
                "–í–Ω—É—Ç—Ä–∏–≥—Ä—É–¥–Ω–æ–π": "intrathoracic",
            }
            incision_code = incision_map[incision_label]

            dur_choice = st.selectbox(
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏",
                ["< 2 —á–∞—Å–∞", "2‚Äì3 —á–∞—Å–∞", "> 3 —á–∞—Å–æ–≤"],
                index=(0 if defaults["duration_minutes"] < 120 else (1 if defaults["duration_minutes"] <= 180 else 2)),
                key="ar_dur_choice",
            )
            # —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ –º–∏–Ω—É—Ç—ã –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
            duration_minutes = (
                90 if dur_choice == "< 2 —á–∞—Å–∞"
                else (150 if dur_choice == "2‚Äì3 —á–∞—Å–∞" else 200)
            )

            emergency = st.checkbox("–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", value=bool(defaults["is_emergency"]), key="ar_emerg")

        submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True)

    # 4) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if submitted:
        data = AriscatInput(
            age_years=age_years,
            spo2_percent=spo2_percent,
            had_resp_infection_last_month=had_inf,
            has_anemia_hb_le_100=anemia,
            incision=incision_code,
            duration_minutes=duration_minutes,
            is_emergency=emergency,
        )
        saved = ar_upsert_result(person.id, data)
        st.session_state["current_patient_info"] = get_person(person.id)
        st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°—É–º–º–∞ –±–∞–ª–ª–æ–≤: **{saved.total_score}** ¬∑ {_risk_label(saved.total_score)}")

    create_big_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "preoperative_exam"}, key="back_btn")
