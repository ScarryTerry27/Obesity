import io
import time
from datetime import date
from importlib import import_module

import pandas as pd
import streamlit as st
from functools import reduce

import database.functions as db_funcs
from database.functions import get_person, create_person, search_persons
from frontend.general import create_big_button
from frontend.scales.stopbang import _sb_risk_label
from frontend.utils import change_menu_item


def _safe(fetch_fn, *args, label="", default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –æ–±—ë—Ä—Ç–∫–∏: –ª–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤ UI."""
    try:
        return fetch_fn(*args)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {label or fetch_fn.__name__}: {e}")
        return default


def _bmi(weight_kg, height_cm):
    try:
        if not weight_kg or not height_cm:
            return None
        h_m = float(height_cm) / 100.0
        if h_m <= 0:
            return None
        return round(float(weight_kg) / (h_m * h_m), 1)
    except Exception:
        return None


def _elg_plan(score):
    if score is None:
        return "‚Äî"
    if 0 <= score <= 3:
        return "–û–±—ã—á–Ω–∞—è –ª–∞—Ä–∏–Ω–≥–æ—Å–∫–æ–ø–∏—è"
    if 4 <= score <= 7:
        return "–í–∏–¥–µ–æ–ª–∞—Ä–∏–Ω–≥–æ—Å–∫–æ–ø–∏—è"
    return "–ò–Ω—Ç—É–±–∞—Ü–∏—è –≤ —Å–æ–∑–Ω–∞–Ω–∏–∏ (–±—Ä–æ–Ω—Ö–æ—Å–∫–æ–ø–∏—è)"


def _stopbang_label(level):
    if level is None:
        return "‚Äî"
    return ["–ù–∏–∑–∫–∏–π", "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π", "–í—ã—Å–æ–∫–∏–π"][max(0, min(2, int(level)))]


def _caprini_label(level):
    if level is None:
        return "‚Äî"
    return [
        "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π",
        "–ù–∏–∑–∫–∏–π",
        "–£–º–µ—Ä–µ–Ω–Ω—ã–π",
        "–í—ã—Å–æ–∫–∏–π",
        "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π",
    ][max(0, min(4, int(level)))]


def _las_vegas_label(level):
    if level is None:
        return "‚Äî"
    return ["–ù–∏–∑–∫–∏–π", "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π", "–í—ã—Å–æ–∫–∏–π"][max(0, min(2, int(level)))]


def _rcri_risk(score):
    if score is None:
        return "‚Äî"
    if score == 0:
        return "‚âà0.4%"
    if score == 1:
        return "‚âà0.9%"
    if score == 2:
        return "‚âà7%"
    return "‚âà11%+"


def show_diagnosis_patient():
    person = get_person(st.session_state["current_patient_id"])
    st.title(f"ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ {person.fio}")
    create_big_button(
        "–ü—Ä–µ–¥–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä",
        on_click=change_menu_item,
        kwargs={"item": "preoperative_exam"},
        icon="üëÅÔ∏è")
    create_big_button(
        "–û–ø–µ—Ä–∞—Ü–∏—è",
        on_click=change_menu_item,
        kwargs={"item": "operation"},
        icon="üß™")
    create_big_button(
        "–ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
        on_click=change_menu_item,
        kwargs={"item": "postoperative_period"},
        icon="üè•")
    create_big_button(
        "–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        on_click=change_menu_item,
        kwargs={"item": "export_patient_data"},
        icon="üì§")
    create_big_button("–ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "patients"}, icon="‚¨ÖÔ∏è")


def add_patient():
    st.title("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    with st.form("add_patient_form"):
        card_number = st.text_input("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã")
        anesthesia_type = st.radio(
            "–¢–∏–ø –∞–Ω–µ—Å—Ç–µ–∑–∏–∏",
            ["–ë–û–ê", "–û–ê"],
            index=0,
            horizontal=True,
        )

        c1, c2, c3 = st.columns(3)
        with c1:
            last_name = st.text_input("–§–∞–º–∏–ª–∏—è")
        with c2:
            first_name = st.text_input("–ò–º—è")
        with c3:
            patronymic = st.text_input("–û—Ç—á–µ—Å—Ç–≤–æ")

        c4, c5 = st.columns(2)
        with c4:
            birth_date = st.date_input("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", value=date(1990, 1, 1))
        with c5:
            inclusion_date = st.date_input("–î–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∏—è", value=date.today())

        c6, c7, c8 = st.columns(3)
        with c6:
            height = st.number_input("–†–æ—Å—Ç (—Å–º)", min_value=120, max_value=220, step=1, value=170)
        with c7:
            weight = st.number_input("–í–µ—Å (–∫–≥)", min_value=20, max_value=260, step=1, value=80)
        with c8:
            gender_label = st.radio("–ü–æ–ª", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"], index=0, horizontal=True)

        gender = (gender_label == "–ñ–µ–Ω—Å–∫–∏–π")  # False=–º—É–∂—Å–∫–æ–π, True=–∂–µ–Ω—Å–∫–∏–π

        try:
            bmi = weight / ((height / 100) ** 2)
            st.caption(f"–ò–ú–¢: **{bmi:.1f} –∫–≥/–º¬≤**")
        except Exception as er:
            print(er)

        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞", width='stretch')

    if submitted:
        if not last_name.strip() or not first_name.strip():
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –§–ò–û.")
            return
        p = create_person(
            card_number,
            anesthesia_type,
            last_name,
            first_name,
            patronymic,
            birth_date,
            inclusion_date,
            height,
            weight,
            gender,
        )
        st.success("–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
        time.sleep(0.3)
        st.session_state["current_patient_id"] = p.id
        st.session_state["current_patient_info"] = p
        change_menu_item(item="diagnosis_patient")
        st.rerun()

    create_big_button("–ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "patients"}, icon="‚¨ÖÔ∏è")


def find_patient():
    st.title("üîç –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞")

    with st.form("find_patient_form", clear_on_submit=False):
        col1, col2, col3 = st.columns(3)
        with col1:
            last_name = st.text_input("–§–∞–º–∏–ª–∏—è", key="patients_find_last_name")
        with col2:
            first_name = st.text_input("–ò–º—è", key="patients_find_first_name")
        with col3:
            patronymic = st.text_input("–û—Ç—á–µ—Å—Ç–≤–æ", key="patients_find_patronymic")

        col4, col5, col6 = st.columns(3)
        with col4:
            age_str = st.text_input("–í–æ–∑—Ä–∞—Å—Ç", key="patients_find_age")
        with col5:
            card_number = st.text_input("–ù–æ–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏", key="patients_find_card")
        with col6:
            inclusion_date = st.date_input("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", value=None, key="patients_find_date")

        submitted = st.form_submit_button("–ò—Å–∫–∞—Ç—å", width='stretch')

    if submitted:
        filters = {
            "last_name": (last_name or "").strip() or None,
            "first_name": (first_name or "").strip() or None,
            "patronymic": (patronymic or "").strip() or None,
            "card_number": (card_number or "").strip() or None,
            "inclusion_date": inclusion_date,
        }
        try:
            filters["age"] = int(age_str) if age_str.strip() else None
        except ValueError:
            st.warning("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            filters["age"] = None
        st.session_state["patients_find_filters"] = filters
        st.rerun()

    filters = st.session_state.get("patients_find_filters")
    if filters:
        results = search_persons(limit=100, **filters)
        if not results:
            st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            st.markdown(f"–ù–∞–π–¥–µ–Ω–æ: **{len(results)}**")
            for p in results:
                col1, col2, col3, col4 = st.columns([4, 1, 1, 1])
                with col1:
                    st.markdown(f"**{p.fio}**")
                    st.caption(f"–í–æ–∑—Ä–∞—Å—Ç: {p.age} ‚Ä¢ –†–æ—Å—Ç: {p.height} —Å–º ‚Ä¢ –í–µ—Å: {p.weight} –∫–≥")
                with col2:
                    st.caption("–ü–æ–ª")
                    st.write("–ñ" if getattr(p, "gender", False) else "–ú")
                with col3:
                    st.caption("–ò–ú–¢")
                    try:
                        bmi = p.weight / ((p.height / 100) ** 2)
                        st.write(f"{bmi:.1f}")
                    except Exception:
                        st.write("‚Äî")
                with col4:
                    if st.button("–í—ã–±—Ä–∞—Ç—å", key=f"pick_{p.id}"):
                        chosen = get_person(p.id)
                        st.session_state["current_patient_id"] = p.id
                        st.session_state["current_patient_info"] = chosen
                        change_menu_item(item="diagnosis_patient")
                        st.rerun()

    st.markdown("---")
    create_big_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=change_menu_item,
                      kwargs={"item": "patients"}, key="back_from_search")


def export_patients():
    st.title("üì§ –í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")

    scale_map = {
        "El-Ganzouri": ("elg", lambda pid: db_funcs.elg_get_result(pid)),
        "ARISCAT": ("ariscat", lambda pid: db_funcs.ar_get_result(pid)),
        "STOP-BANG": ("stopbang", lambda pid: db_funcs.sb_get_result(pid)),
        "SOBA": ("soba", lambda pid: db_funcs.get_soba(pid)),
        "RCRI": ("rcri", lambda pid: db_funcs.rcri_get_result(pid)),
        "Caprini": ("caprini", lambda pid: db_funcs.caprini_get_result(pid)),
        "Las Vegas": ("las_vegas", lambda pid: db_funcs.lv_get_result(pid)),
        "QoR-15": ("qor15", lambda pid: db_funcs.qor15_get_result(pid)),
        "Aldrete": ("aldrete", lambda pid: db_funcs.ald_get_result(pid)),
        "MMSE t0": ("mmse_t0", lambda pid: db_funcs.mmse_get_result(pid, 0)),
        "MMSE t10": ("mmse_t10", lambda pid: db_funcs.mmse_get_result(pid, 10)),
    }
    slice_map = {f"T{i}": (f"t{i}", getattr(db_funcs, f"t{i}_get_result")) for i in range(13)}

    table_labels = ["–ü–∞—Ü–∏–µ–Ω—Ç—ã", "–°—Ç–∞—Ç—É—Å—ã —à–∫–∞–ª"] + list(scale_map.keys()) + list(slice_map.keys())
    select_all = st.checkbox("–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ")
    selected = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏",
        table_labels,
        default=table_labels if select_all else [],
    )
    if select_all:
        selected = table_labels

    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≥—Ä—É–∑–∫—É", use_container_width=True):
        persons = search_persons(limit=100000)
        if not persons:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        base_df = pd.DataFrame({"patient_id": [p.id for p in persons]})
        dfs = [base_df]

        if "–ü–∞—Ü–∏–µ–Ω—Ç—ã" in selected:
            patient_rows = []
            for person in persons:
                atype = getattr(person, "anesthesia_type", None)
                patient_rows.append(
                    {
                        "patient_id": person.id,
                        "card_number": getattr(person, "card_number", ""),
                        "last_name": getattr(person, "last_name", ""),
                        "first_name": getattr(person, "first_name", ""),
                        "patronymic": getattr(person, "patronymic", ""),
                        "inclusion_date": getattr(person, "inclusion_date", None),
                        "anesthesia_type": atype.value if atype else "",
                        "age": getattr(person, "age", None),
                        "height": getattr(person, "height", None),
                        "weight": getattr(person, "weight", None),
                        "gender": "–ñ" if bool(getattr(person, "gender", False)) else "–ú",
                        "bmi": _bmi(getattr(person, "weight", None), getattr(person, "height", None)),
                    }
                )
            dfs.append(pd.DataFrame(patient_rows))

        if "–°—Ç–∞—Ç—É—Å—ã —à–∫–∞–ª" in selected:
            status_rows = []
            for person in persons:
                full = _safe(get_person, person.id, label="–∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
                sc = getattr(full, "scales", None) if full else None
                row = {"patient_id": person.id}
                if sc:
                    for field in [
                        "el_ganzouri_filled",
                        "ariscat_filled",
                        "stopbang_filled",
                        "soba_filled",
                        "lee_rcri_filled",
                        "caprini_filled",
                        "las_vegas_filled",
                        "aldrete_filled",
                        "mmse_t0_filled",
                        "mmse_t10_filled",
                        "qor15_filled",
                    ]:
                        row[field] = bool(getattr(sc, field, False))
                status_rows.append(row)
            dfs.append(pd.DataFrame(status_rows))

        for label, (prefix, getter) in scale_map.items():
            if label not in selected:
                continue
            rows = []
            for person in persons:
                res = _safe(getter, person.id, label=label)
                row = {"patient_id": person.id}
                if res is not None:
                    data = res.model_dump()
                    data.pop("id", None)
                    data.pop("scales_id", None)
                    for k, v in data.items():
                        row[f"{prefix}_{k}"] = v
                rows.append(row)
            dfs.append(pd.DataFrame(rows))

        for label, (prefix, getter) in slice_map.items():
            if label not in selected:
                continue
            rows = []
            schema_module = import_module(f"database.schemas.slice_{prefix}")
            schema_cls = getattr(schema_module, f"Slice{prefix.upper()}Input")
            fields = list(schema_cls.model_fields.keys())
            for person in persons:
                res = _safe(getter, person.id, label=f"—Å—Ä–µ–∑ {label}")
                row = {"patient_id": person.id}
                for f in fields:
                    row[f"{prefix}_{f}"] = getattr(res, f, None) if res is not None else None
                rows.append(row)
            dfs.append(pd.DataFrame(rows))

        df_final = reduce(lambda l, r: pd.merge(l, r, on="patient_id", how="left"), dfs)
        df_final.replace({True: 1, False: 0}, inplace=True)

        st.markdown("### –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        st.dataframe(df_final, width="stretch")

        buf = io.BytesIO()
        df_final.to_excel(buf, index=False)
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
            data=buf.getvalue(),
            file_name="patients_export.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True,
        )

    create_big_button("–ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "patients"}, icon="‚¨ÖÔ∏è")


def show_patients_menu():
    st.title("üë©‚Äç‚öïÔ∏è –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏")
    create_big_button("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞", on_click=change_menu_item, kwargs={"item": "add_patient"}, icon="‚ûï")
    create_big_button("–ù–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞", on_click=change_menu_item, kwargs={"item": "find_patient"}, icon="üîç")
    create_big_button(
        "–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤",
        on_click=change_menu_item,
        kwargs={"item": "export_patients"},
        icon="üì§")
    create_big_button("–ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "main"}, icon="‚¨ÖÔ∏è")


def preoperative_exam():
    person = st.session_state["current_patient_info"]
    st.title(f"üëÅÔ∏è –ü—Ä–µ–¥–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞ {person.fio}")

    scales_status = getattr(person, "scales", None)
    slices_status = getattr(person, "slices", None)

    t0_filled = bool(getattr(slices_status, "t0_filled", False)) if slices_status else False
    col_t0_1, col_t0_2 = st.columns([2, 1])
    with col_t0_1:
        st.markdown(
            f"**–°—Ä–µ–∑ t0 -  –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è**  \n–°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' if t0_filled else '‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}"
        )
    with col_t0_2:
        create_big_button(
            "–ü–µ—Ä–µ–π—Ç–∏",
            on_click=change_menu_item,
            kwargs={"item": "show_t0_slice"},
            icon="üìù",
            key="t0_btn",
        )

    mmse_t0_filled = bool(getattr(scales_status, "mmse_t0_filled", False)) if scales_status else False
    mmse_t0_score = None
    if mmse_t0_filled and scales_status:
        for r in getattr(scales_status, "mmse_results", []) or []:
            if getattr(r, "timepoint", None) == 0:
                mmse_t0_score = getattr(r, "total_score", None)
                break
    col_mmse1, col_mmse2 = st.columns([2, 1])
    with col_mmse1:
        status = (
            f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ ¬∑ –ë–∞–ª–ª—ã: **{mmse_t0_score}**" if mmse_t0_score is not None else (
                "‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ" if mmse_t0_filled else "‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
            )
        )
        st.markdown(f"**–®–∫–∞–ª–∞ MMSE (t0) ‚Äî –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å**  \\n–°—Ç–∞—Ç—É—Å: {status}")
    with col_mmse2:
        create_big_button(
            "–ü–µ—Ä–µ–π—Ç–∏",
            on_click=change_menu_item,
            kwargs={"item": "show_mmse_t0"},
            icon="üìä",
            key="mmse_t0_btn",
        )

    # –í–ê–ñ–ù–û: —Ä–∞–∑–¥–µ–ª–∏–ª–∏ STOP-BANG –∏ SOBA –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    scales = [
        ("–®–∫–∞–ª–∞ El-Ganzouri ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ —Ç—Ä—É–¥–Ω–æ–π –∏–Ω—Ç—É–±–∞—Ü–∏–∏", "show_elganzouri_scale", "el_ganzouri_filled", "el_ganzouri"),
        ("–®–∫–∞–ª–∞ ARISCAT ‚Äî —Ä–∏—Å–∫ –ø–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ª–µ–≥–æ—á–Ω—ã—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π", "show_ariscat_scale", "ariscat_filled",
         "ariscat"),
        ("–®–∫–∞–ª–∞ STOP-BANG ‚Äî —Å–∫—Ä–∏–Ω–∏–Ω–≥ –°–û–ê–°", "show_stopbang_scale", "stopbang_filled", "stopbang"),
        ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ SOBA ‚Äî –ø–ª–∞–Ω –≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –æ–∂–∏—Ä–µ–Ω–∏–∏", "show_soba_scale", "soba_filled", "soba"),
        ("–ò–Ω–¥–µ–∫—Å Lee (RCRI) ‚Äî –æ—Ü–µ–Ω–∫–∞ –∫–∞—Ä–¥–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞", "show_lee_scale", "lee_rcri_filled", "lee_rcri"),
        ("–®–∫–∞–ª–∞ Caprini ‚Äî –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –í–¢–≠–û", "show_caprini_scale", "caprini_filled", "caprini"),
        ("–®–∫–∞–ª–∞ QoR-15 ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "show_qor15_scale", "qor15_filled", "qor15"),
        ("–®–∫–∞–ª–∞ Aldrete ‚Äî –æ—Ü–µ–Ω–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–Ω–µ—Å—Ç–µ–∑–∏–∏", "show_aldrete_scale", "aldrete_filled", "aldrete"),
    ]

    for i, (label, item, status_field, rel_field) in enumerate(scales):
        col1, col2 = st.columns([2, 1])

        if not scales_status:
            status_text = "‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        else:
            filled = bool(getattr(scales_status, status_field, False))
            if filled:
                rel_obj = getattr(scales_status, rel_field, None)
                if rel_obj is None:
                    status_text = "‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ"
                else:
                    score = getattr(rel_obj, "total_score", None)
                    if rel_field == "stopbang":
                        risk = _sb_risk_label(getattr(rel_obj, "risk_level", None))
                        if score is not None and risk:
                            status_text = f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ ¬∑ –ë–∞–ª–ª—ã: **{score}** ¬∑ –†–∏—Å–∫: **{risk}**"
                        elif score is not None:
                            status_text = f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ ¬∑ –ë–∞–ª–ª—ã: **{score}**"
                        else:
                            status_text = "‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ"
                    else:
                        status_text = f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ ¬∑ –ë–∞–ª–ª—ã: **{score}**" if score is not None else "‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ"
            else:
                status_text = "‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"

        with col1:
            st.markdown(f"**{label}**  \n–°—Ç–∞—Ç—É—Å: {status_text}")
        with col2:
            create_big_button(
                "–ü–µ—Ä–µ–π—Ç–∏",
                on_click=change_menu_item,
                kwargs={"item": item},
                icon="üìä",
                key=f"scale_btn_{i}"
            )

    st.markdown("---")
    create_big_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "diagnosis_patient"}, key="back_btn")
