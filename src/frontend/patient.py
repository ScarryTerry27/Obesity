import time

import streamlit as st

from database.functions import get_person, create_person, search_persons
from frontend.general import create_big_button
from frontend.scales.stopbang import _sb_risk_label
from frontend.utils import change_menu_item


def show_diagnosis_patient():
    person = get_person(st.session_state["current_patient_id"])
    st.title(f"ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ {person.fio}")
    create_big_button(
        "–ü—Ä–µ–¥–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä",
        on_click=change_menu_item,
        kwargs={"item": "preoperative_exam"},
        icon="üëÅÔ∏è")
    create_big_button(
        "–û–ø–µ—Ä–∞—Ü–∏—è",
        on_click=change_menu_item,
        kwargs={"item": "operation"},
        icon="üß™")
    create_big_button(
        "–ü–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
        on_click=change_menu_item,
        kwargs={"item": "postoperative_period"},
        icon="üè•")
    create_big_button(
        "–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        on_click=change_menu_item,
        kwargs={"item": "export_patient_data"},
        icon="üì§")
    create_big_button("–ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "patients"}, icon="‚¨ÖÔ∏è")


def add_patient():
    st.title("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    with st.form("add_patient_form"):
        fio = st.text_input("–§–ò–û")

        c1, c2, c3 = st.columns(3)
        with c1:
            age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=12, max_value=120, step=1, value=30)
        with c2:
            height = st.number_input("–†–æ—Å—Ç (—Å–º)", min_value=120, max_value=220, step=1, value=170)
        with c3:
            weight = st.number_input("–í–µ—Å (–∫–≥)", min_value=20, max_value=260, step=1, value=80)

        gender_label = st.radio("–ü–æ–ª", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"], index=0, horizontal=True)
        gender = (gender_label == "–ñ–µ–Ω—Å–∫–∏–π")  # False=–º—É–∂—Å–∫–æ–π, True=–∂–µ–Ω—Å–∫–∏–π

        # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –ò–ú–¢
        try:
            bmi = weight / ((height / 100) ** 2)
            st.caption(f"–ò–ú–¢: **{bmi:.1f} –∫–≥/–º¬≤**")
        except Exception as er:
            print(er)

        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞", use_container_width=True)

    if submitted:
        if not fio.strip():
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –§–ò–û.")
            return
        # age/height/weight —É–∂–µ –≤–∞–ª–∏–¥–Ω—ã –ø–æ min_value
        p = create_person(fio, age, height, weight, gender)  # üëà –¥–æ–±–∞–≤–∏–ª–∏ gender
        st.success("–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
        time.sleep(0.3)
        st.session_state["current_patient_id"] = p.id
        st.session_state["current_patient_info"] = p
        change_menu_item(item="diagnosis_patient")
        st.rerun()

    create_big_button("–ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "patients"}, icon="‚¨ÖÔ∏è")


def find_patient():
    st.title("üîç –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞")

    # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
    with st.form("find_patient_form", clear_on_submit=False):
        q = st.text_input("–§–∞–º–∏–ª–∏—è (–∏–ª–∏ —á–∞—Å—Ç—å –§–ò–û)", key="patients_find_q",
                          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤")
        submitted = st.form_submit_button("–ò—Å–∫–∞—Ç—å", use_container_width=True)

    # –ü—Ä–∏ —Å–∞–±–º–∏—Ç–µ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –¥–µ–ª–∞–µ–º rerun
    if submitted:
        q_fixed = (q or "").strip()
        if not q_fixed:
            st.warning("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        else:
            st.session_state["patients_find_q_committed"] = q_fixed
            st.rerun()

    # –ë–µ—Ä—ë–º ¬´–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π¬ª –∑–∞–ø—Ä–æ—Å
    q_committed = st.session_state.get("patients_find_q_committed", "").strip()

    # –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç submitted
    if q_committed:
        results = search_persons(q_committed, limit=100)
        if not results:
            st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            st.markdown(f"–ù–∞–π–¥–µ–Ω–æ: **{len(results)}**")
            for p in results:
                col1, col2, col3, col4 = st.columns([4, 1, 1, 1])
                with col1:
                    st.markdown(f"**{p.fio}**")
                    st.caption(f"–í–æ–∑—Ä–∞—Å—Ç: {p.age} ‚Ä¢ –†–æ—Å—Ç: {p.height} —Å–º ‚Ä¢ –í–µ—Å: {p.weight} –∫–≥")
                with col2:
                    st.caption("–ü–æ–ª")
                    st.write("–ñ" if getattr(p, "gender", False) else "–ú")
                with col3:
                    st.caption("–ò–ú–¢")
                    try:
                        bmi = p.weight / ((p.height / 100) ** 2)
                        st.write(f"{bmi:.1f}")
                    except Exception:
                        st.write("‚Äî")
                with col4:
                    if st.button("–í—ã–±—Ä–∞—Ç—å", key=f"pick_{p.id}"):
                        chosen = get_person(p.id)
                        st.session_state["current_patient_id"] = p.id
                        st.session_state["current_patient_info"] = chosen
                        change_menu_item(item="diagnosis_patient")
                        st.rerun()

    st.markdown("---")
    create_big_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=change_menu_item,
                      kwargs={"item": "patients"}, key="back_from_search")


def export_patients():
    st.title("üì§ –í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    st.write("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.")
    create_big_button("–ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "patients"}, icon="‚¨ÖÔ∏è")


def show_patients_menu():
    st.title("üë©‚Äç‚öïÔ∏è –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏")
    create_big_button("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞", on_click=change_menu_item, kwargs={"item": "add_patient"}, icon="‚ûï")
    create_big_button("–ù–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞", on_click=change_menu_item, kwargs={"item": "find_patient"}, icon="üîç")
    create_big_button(
        "–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤",
        on_click=change_menu_item,
        kwargs={"item": "export_patients"},
        icon="üì§")
    create_big_button("–ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "main"}, icon="‚¨ÖÔ∏è")


def preoperative_exam():
    person = st.session_state["current_patient_info"]
    st.title(f"üëÅÔ∏è –ü—Ä–µ–¥–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞ {person.fio}")

    scales_status = getattr(person, "scales", None)

    # –í–ê–ñ–ù–û: —Ä–∞–∑–¥–µ–ª–∏–ª–∏ STOP-BANG –∏ SOBA –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    scales = [
        ("–®–∫–∞–ª–∞ El-Ganzouri ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ —Ç—Ä—É–¥–Ω–æ–π –∏–Ω—Ç—É–±–∞—Ü–∏–∏", "show_elganzouri_scale", "el_ganzouri_filled", "el_ganzouri"),
        ("–®–∫–∞–ª–∞ ARISCAT ‚Äî —Ä–∏—Å–∫ –ø–æ—Å–ª–µ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ª–µ–≥–æ—á–Ω—ã—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π", "show_ariscat_scale", "ariscat_filled",
         "ariscat"),
        ("–®–∫–∞–ª–∞ STOP-BANG ‚Äî —Å–∫—Ä–∏–Ω–∏–Ω–≥ –°–û–ê–°", "show_stopbang_scale", "stopbang_filled", "stopbang"),
        ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ SOBA ‚Äî –ø–ª–∞–Ω –≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –æ–∂–∏—Ä–µ–Ω–∏–∏", "show_soba_scale", "soba_filled", "soba"),
        ("–ò–Ω–¥–µ–∫—Å Lee (RCRI) ‚Äî –æ—Ü–µ–Ω–∫–∞ –∫–∞—Ä–¥–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞", "show_lee_scale", "lee_rcri_filled", "lee_rcri"),
        ("–®–∫–∞–ª–∞ Caprini ‚Äî –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –í–¢–≠–û", "show_caprini_scale", "caprini_filled", "caprini"),
    ]

    for i, (label, item, status_field, rel_field) in enumerate(scales):
        col1, col2 = st.columns([2, 1])

        if not scales_status:
            status_text = "‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        else:
            filled = bool(getattr(scales_status, status_field, False))
            if filled:
                rel_obj = getattr(scales_status, rel_field, None)
                if rel_obj is None:
                    status_text = "‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ"
                else:
                    score = getattr(rel_obj, "total_score", None)
                    if rel_field == "stopbang":
                        risk = _sb_risk_label(getattr(rel_obj, "risk_level", None))
                        if score is not None and risk:
                            status_text = f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ ¬∑ –ë–∞–ª–ª—ã: **{score}** ¬∑ –†–∏—Å–∫: **{risk}**"
                        elif score is not None:
                            status_text = f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ ¬∑ –ë–∞–ª–ª—ã: **{score}**"
                        else:
                            status_text = "‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ"
                    else:
                        status_text = f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ ¬∑ –ë–∞–ª–ª—ã: **{score}**" if score is not None else "‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ"
            else:
                status_text = "‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"

        with col1:
            st.markdown(f"**{label}**  \n–°—Ç–∞—Ç—É—Å: {status_text}")
        with col2:
            create_big_button(
                "–ü–µ—Ä–µ–π—Ç–∏",
                on_click=change_menu_item,
                kwargs={"item": item},
                icon="üìä",
                key=f"scale_btn_{i}"
            )

    st.markdown("---")
    create_big_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=change_menu_item, kwargs={"item": "diagnosis_patient"}, key="back_btn")
